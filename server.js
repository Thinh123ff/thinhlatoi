require('dotenv').config();
const pdfParse = require('pdf-parse');
const mammoth = require('mammoth');
const csvParse = require('csv-parse/sync');
const { encode } = require('gpt-3-encoder');
const axios = require('axios');
const express = require('express');
const multer = require('multer');
const fs = require('fs');
const cors = require('cors');
const app = express();
const port = 5000;
const upload = multer({ dest: 'uploads/' });

app.use(cors({
    origin: [
        'https://thinhnt-mr.github.io',
        'https://cron-job.org'
    ]
}));
app.use(express.json());
app.use(express.static('public'));

// L∆∞u tr·ªØ phi√™n h·ªôi tho·∫°i
const sessions = {};

// H√†m ƒë·∫øm token t·ª´ messages
function countTokensFromMessages(messages) {
    const flatContent = messages
        .map(msg => {
            if (typeof msg.content === 'string') return msg.content;
            if (Array.isArray(msg.content)) {
                return msg.content.map(item => item.text || '').join(' ');
            }
            return '';
        })
        .join(' ');
    return encode(flatContent).length;
}

// T·∫°o ho·∫∑c l·∫•y phi√™n h·ªôi tho·∫°i
function getOrCreateSession(sessionId) {
    if (!sessions[sessionId]) {
        sessions[sessionId] = {
            messages: [
                {
                    role: 'system',
                    content: `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng b·∫±ng ƒë·ªãnh d·∫°ng Markdown.

üîπ Khi tr·∫£ l·ªùi:
- Lu√¥n r√µ r√†ng, c√≥ c·∫•u tr√∫c. ∆Øu ti√™n chia nh·ªè n·ªôi dung s·ª≠ d·ª•ng icon ƒëa d·∫°ng t√πy v√†o ti√™u ƒë·ªÅ nh∆∞: **Gi·∫£i th√≠ch**, üî∏V√≠ d·ª•, ‚úÖG·ª£i √Ω ti·∫øp theo, üìçT·ªïng k·∫øt, ‚úÖ T√≥m l·∫°i, üìå Nguy√™n nh√¢n ch√≠nh, üìå C√°ch x·ª≠ l√Ω,.
- Khi c√≥ nhi·ªÅu m√≥n ƒÉn ho·∫∑c nhi·ªÅu m·ª•c, h√£y ph√¢n lo·∫°i t·ª´ng ti√™u ƒë·ªÅ b·∫±ng icon nh∆∞:
  - üç≤ **C√°ch n·∫•u canh c√° l√≥c**
  - üçó **C√°ch l√†m c√°nh g√† chi√™n m·∫Øm**
- ∆Øu ti√™n ti√™u ƒë·ªÅ ch√≠nh b·∫±ng \`###\` ho·∫∑c \`**bold**\`, sau ƒë√≥ xu·ªëng d√≤ng chi ti·∫øt.
- C√≥ th·ªÉ tr√¨nh b√†y d·∫°ng b·∫£ng n·∫øu ph√π h·ª£p.
V√≠ d·ª•:

| M√≥n ƒÇn | Lo·∫°i |
|:------------|:----------------|
| üç≤ Canh c√° l√≥c | M√≥n canh |
| üçó C√°nh g√† chi√™n m·∫Øm | M√≥n chi√™n |

- N·∫øu c√≥ n·ªôi dung d·∫°ng li·ªát k√™, h√£y d√πng **danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng**.
- N·∫øu n·ªôi dung c√≥ th·ªÉ ph√¢n lo·∫°i, h√£y d√πng **b·∫£ng markdown**.
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn tr∆∞·ªõc, chi ti·∫øt ·ªü ph·∫ßn sau n·∫øu c·∫ßn.
- N·∫øu l√† m√£ code, h√£y ƒë·∫∑t trong block markdown nh∆∞ \`\`\`ng√¥n_ng·ªØ\`\`\`.
- Gi·∫£i th√≠ch r√µ r√†ng, **th√¢n thi·ªán**, ng·∫Øn g·ªçn.
- Khi c·∫ßn, h√£y tr√¨nh b√†y b·∫±ng b·∫£ng, danh s√°ch ho·∫∑c ƒë·ªãnh d·∫°ng markdown r√µ r√†ng.
- Bi·∫øt ƒëi·ªÅu ch·ªânh **gi·ªçng vƒÉn** t√πy theo n·ªôi dung: k·ªπ thu·∫≠t ‚Üí chi ti·∫øt; ƒë·ªùi s·ªëng ‚Üí ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu.
- N·∫øu m√¥ t·∫£ s·ª± kh√°c bi·ªát, h√£y t·∫°o b·∫£ng ‚úÖ‚ùå ƒë·ªÉ so s√°nh, gi√∫p ng∆∞·ªùi ƒë·ªçc d·ªÖ hi·ªÉu h∆°n.
- K·∫øt th√∫c tr·∫£ l·ªùi c√≥ th·ªÉ h·ªèi l·∫°i nh·∫π nh√†ng, th√¢n thi·ªán th√™m icon ph√π h·ª£p ng·ªØ c·∫£nh.

üìÅ N·∫øu ng∆∞·ªùi d√πng t·∫£i l√™n file:

- üìñ **ƒê·ªçc k·ªπ n·ªôi dung file** v√† **m√¥ t·∫£ l·∫°i r√µ r√†ng** cho ng∆∞·ªùi d√πng d·ªÖ hi·ªÉu.
- üîç **Ph√¢n t√≠ch n·ªôi dung file**:
  - N·∫øu n·ªôi dung l√† **b√†i t·∫≠p l·∫≠p tr√¨nh** ho·∫∑c y√™u c·∫ßu x·ª≠ l√Ω li√™n quan ƒë·∫øn code:
    - Hi·ªÉu ƒë√∫ng v√† ƒë·∫ßy ƒë·ªß y√™u c·∫ßu b√†i t·∫≠p ghi trong file.
    - **Tr·∫£ l·ªùi, gi·∫£i b√†i ho·∫∑c vi·∫øt code theo ƒë√∫ng y√™u c·∫ßu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong file**.
    - N·∫øu b√†i y√™u c·∫ßu x·ª≠ l√Ω logic cao (v√≠ d·ª•: *t·∫°o danh s√°ch qu·∫£n l√Ω sinh vi√™n b·∫±ng PHP k·∫øt n·ªëi database phpMyAdmin*), AI c·∫ßn:
      - Ph√¢n t√≠ch v√† gi·∫£i th√≠ch √Ω t∆∞·ªüng th·ª±c hi·ªán.
      - Vi·∫øt m·∫´u code v√† h∆∞·ªõng d·∫´n c√°c b∆∞·ªõc tri·ªÉn khai c·ª• th·ªÉ.
  - N·∫øu l√† **c√¢u h·ªèi ho·∫∑c b√†i t·∫≠p ng·∫Øn v·ªÅ code**:
    - Gi·∫£i th√≠ch v√† tr·∫£ l·ªùi tr·ª±c ti·∫øp theo n·ªôi dung file.
- üìå **D√πng ch√≠nh x√°c t√™n file** trong ph·∫ßn ph·∫£n h·ªìi g·ª≠i l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ d·ªÖ theo d√µi.
- üìë **Nh·∫Øc l·∫°i n·ªôi dung y√™u c·∫ßu ƒë√£ ƒë·ªçc ƒë∆∞·ª£c** tr∆∞·ªõc khi tr·∫£ l·ªùi ƒë·ªÉ x√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng.

üìå Tr√°nh tr·∫£ l·ªùi h·ªùi h·ª£t ho·∫∑c ‚Äúkh√¥ng bi·∫øt‚Äù. N·∫øu ch∆∞a ch·∫Øc, h√£y h·ªèi l·∫°i ƒë·ªÉ l√†m r√µ.

üåê N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn: link, website, ƒë·ªãa ch·ªâ trang web, t√™n mi·ªÅn... b·∫°n KH√îNG c·∫ßn ƒëo√°n hay t·∫°o ra. H·ªá th·ªëng s·∫Ω t√¨m ki·∫øm web v√† hi·ªÉn th·ªã k·∫øt qu·∫£. B·∫°n ch·ªâ ph·∫£n h·ªìi ƒë∆°n gi·∫£n n·∫øu c·∫ßn.

üß† Ph·∫°m vi h·ªó tr·ª£:
- L·∫≠p tr√¨nh, k·ªπ thu·∫≠t, t√†i li·ªáu, h·ªçc t·∫≠p, n·∫•u ƒÉn, s·ª©c kh·ªèe c∆° b·∫£n, k·ªπ nƒÉng m·ªÅm, kinh doanh nh·ªè.
- T√¨m ki·∫øm th√¥ng tin n√¢ng cao n·∫øu c√≥ c√¥ng c·ª• h·ªó tr·ª£.

- **Kh√¥ng tr·∫£ l·ªùi qua loa, h·ªùi h·ª£t** v·ªõi nh·ªØng c√¢u h·ªèi ch∆∞a hi·ªÉu r√µ ho·∫∑c th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß.
- **N·∫øu ch∆∞a ch·∫Øc ch·∫Øn ho·∫∑c th√¥ng tin m∆° h·ªì**:
  - H·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ l√†m r√µ y√™u c·∫ßu ho·∫∑c n·ªôi dung c√≤n thi·∫øu.
  - V√≠ d·ª•: _‚ÄúM√¨nh ch∆∞a r√µ b·∫°n mu·ªën th·ª±c hi·ªán ch·ª©c nƒÉng n√†o, b·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m kh√¥ng? üòä‚Äù_
- **Kh√¥ng d√πng c√¢u tr·∫£ l·ªùi d·∫°ng ph·ªßi tr√°ch nhi·ªám** nh∆∞ ‚ÄúM√¨nh kh√¥ng bi·∫øt‚Äù ho·∫∑c ‚ÄúAI kh√¥ng th·ªÉ x·ª≠ l√Ω vi·ªác n√†y‚Äù m√† kh√¥ng ƒë∆∞a ra h∆∞·ªõng x·ª≠ l√Ω.
- Tr∆∞·ªùng h·ª£p n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£:
  - Nh·∫Øc ng∆∞·ªùi d√πng v·ªÅ ph·∫°m vi h·ªó tr·ª£ hi·ªán t·∫°i.
  - G·ª£i √Ω h∆∞·ªõng x·ª≠ l√Ω kh√°c ho·∫∑c khuy√™n ng∆∞·ªùi d√πng tham kh·∫£o ngu·ªìn ph√π h·ª£p.

üí° M·ª•c ti√™u: ƒê·∫£m b·∫£o c√¢u tr·∫£ l·ªùi **c√≥ tr√°ch nhi·ªám, d·ªÖ hi·ªÉu, kh√¥ng b·ªè s√≥t v√† t·∫°o c·∫£m gi√°c ƒë∆∞·ª£c h·ªó tr·ª£ nhi·ªát t√¨nh.**

üåê N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn: link, website, ƒë·ªãa ch·ªâ trang web, t√™n mi·ªÅn... b·∫°n KH√îNG c·∫ßn ƒëo√°n hay t·∫°o ra. H·ªá th·ªëng s·∫Ω t√¨m ki·∫øm web v√† hi·ªÉn th·ªã k·∫øt qu·∫£. B·∫°n ch·ªâ ph·∫£n h·ªìi ƒë∆°n gi·∫£n n·∫øu c·∫ßn.

üß† Ghi nh·ªõ v√† s·ª≠ d·ª•ng ng·ªØ c·∫£nh h·ªôi tho·∫°i:

- Lu√¥n nh·ªõ n·ªôi dung h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr·∫£ l·ªùi **m·∫°ch l·∫°c, li·ªÅn m·∫°ch v√† ƒë√∫ng m·∫°ch tr√≤ chuy·ªán**.
- N·∫øu ng∆∞·ªùi d√πng **h·ªèi l·∫°i v·ªÅ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc** ho·∫∑c y√™u c·∫ßu gi·∫£i th√≠ch th√™m:
  - D·ª±a v√†o **ph·∫ßn ph·∫£n h·ªìi ƒë√£ tr·∫£ l·ªùi tr∆∞·ªõc** ƒë·ªÉ di·ªÖn gi·∫£i, gi·∫£i th√≠ch ho·∫∑c ch·ªânh s·ª≠a l·∫°i cho ph√π h·ª£p.
  - Tr√°nh tr·∫£ l·ªùi l·∫°i t·ª´ ƒë·∫ßu ho·∫∑c l·∫∑p l·∫°i to√†n b·ªô n·ªôi dung c≈© n·∫øu kh√¥ng c·∫ßn thi·∫øt.
- N·∫øu ng∆∞·ªùi d√πng **g·ª≠i th√™m file ho·∫∑c n·ªôi dung b·ªï sung** li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ ƒëang trao ƒë·ªïi:
  - ƒê·ªçc v√† ph√¢n t√≠ch n·ªôi dung m·ªõi.
  - **K·∫øt h·ª£p v·ªõi ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥** ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß, tr√°nh s√≥t √Ω ho·∫∑c tr·∫£ l·ªùi kh√¥ng li√™n quan.
- Trong tr∆∞·ªùng h·ª£p c·∫ßn thi·∫øt, **t√≥m t·∫Øt nhanh n·ªôi dung h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥** ƒë·ªÉ ng∆∞·ªùi d√πng d·ªÖ theo d√µi v√† g·ª£i nh·ªõ.
- Gi·ªØ cho to√†n b·ªô cu·ªôc tr√≤ chuy·ªán **li√™n t·ª•c, t·ª± nhi√™n, logic** nh∆∞ m·ªôt cu·ªôc tr√≤ chuy·ªán th·∫≠t s·ª± gi·ªØa ng∆∞·ªùi v·ªõi ng∆∞·ªùi.

‚úÖ M·ª•c ti√™u: Gi√∫p ng∆∞·ªùi d√πng hi·ªÉu s√¢u h∆°n v√† kh√°m ph√° ƒëi·ªÅu g√¨ ƒë√≥ h·ªØu √≠ch!

V√≠ d·ª• khi c·∫ßn tr√¨nh b√†y l·ªãch ho·∫∑c ph√¢n lo·∫°i, h√£y tr·∫£ l·ªùi nh∆∞ sau:

| Ng√†y       | N·ªôi dung        |
|------------|-----------------|
| Th·ª© Hai    | Cardio          |
| Th·ª© Ba     | S·ª©c m·∫°nh        |
| Th·ª© T∆∞     | Yoga / ngh·ªâ     |

Ho·∫∑c:

- üìå M·ª•c ti√™u:
  - TƒÉng s·ª©c m·∫°nh
  - Gi·∫£m m·ª°
`
                }
            ],
            createdAt: new Date()
        };
    }
    return sessions[sessionId];
}

// D·ªçn d·∫πp phi√™n h·∫øt h·∫°n (phi√™n c≈© h∆°n 24 gi·ªù)
function cleanupSessions() {
    const now = new Date();
    Object.keys(sessions).forEach(id => {
        const session = sessions[id];
        const ageInHours = (now - new Date(session.createdAt)) / (1000 * 60 * 60);
        if (ageInHours > 24) {
            delete sessions[id];
        }
    });
}

// Ch·∫°y d·ªçn d·∫πp m·ªói gi·ªù
setInterval(cleanupSessions, 1000 * 60 * 60);

app.post('/ask', upload.array('files'), async (req, res) => {
    const message = req.body.message || '';
    const files = req.files || [];
    const sessionId = req.body.sessionId || 'default';

    try {
        const session = getOrCreateSession(sessionId);

        const content = [
            { type: 'text', text: `\n${message}` }
        ];

        for (const file of files) {
            const buffer = fs.readFileSync(file.path);
            const mime = file.mimetype;
            const filename = file.originalname;

            try {
                if (mime === 'application/pdf') {
                    const pdfData = await pdfParse(buffer);
                    content.push({
                        type: 'text',
                        text: `üìÑ **N·ªôi dung t·ª´ file PDF _${filename}_**:\n\n${pdfData.text.slice(0, 5000)}`
                    });
                } else if (mime === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    const result = await mammoth.extractRawText({ buffer });
                    content.push({
                        type: 'text',
                        text: `üìù **N·ªôi dung t·ª´ file Word _${filename}_**:\n\n${result.value.slice(0, 5000)}`
                    });
                } else if (mime === 'text/csv') {
                    const csvText = buffer.toString('utf8');
                    const records = csvParse.parse(csvText, { columns: true });
                    const preview = JSON.stringify(records.slice(0, 3), null, 2);
                    content.push({
                        type: 'text',
                        text: `üìä **D·ªØ li·ªáu CSV t·ª´ _${filename}_ (3 d√≤ng ƒë·∫ßu)**:\n\n\`\`\`json\n${preview}\n\`\`\``
                    });
                } else if (mime.startsWith('image/')) {
                    const base64 = buffer.toString('base64');
                    content.push({
                        type: 'image_url',
                        image_url: {
                            url: `data:${mime};base64,${base64}`,
                            detail: 'auto'
                        }
                    });
                } else {
                    const textContent = buffer.toString('utf8').slice(0, 5000);
                    content.push({
                        type: 'text',
                        text: `üìé **N·ªôi dung t·ª´ file _${filename}_**:\n\n${textContent}`
                    });
                }
            } catch (err) {
                content.push({
                    type: 'text',
                    text: `‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω n·ªôi dung t·ª´ file _${filename}_.`
                });
            }
        }

        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o phi√™n
        session.messages.push({
            role: 'user',
            content: content
        });

        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° token
        const maxMessagesToKeep = 10; // C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo nhu c·∫ßu
        if (session.messages.length > maxMessagesToKeep + 1) { // +1 cho system message
            session.messages = [
                session.messages[0], // Gi·ªØ system message
                ...session.messages.slice(-(maxMessagesToKeep))
            ];
        }

        const tokenLimit = 4096; // ho·∫∑c 8192 n·∫øu model h·ªó tr·ª£
        const promptTokens = countTokensFromMessages(session.messages);
        const safeMaxTokens = Math.max(256, tokenLimit - promptTokens - 100); // ch·ª´a 100 tokens an to√†n

        console.log('ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn OpenRouter...');
        console.log(`promptTokens: ${promptTokens}, max_tokens: ${safeMaxTokens}`);
        console.log(`Session ${sessionId} c√≥ ${session.messages.length} tin nh·∫Øn`);

        if (promptTokens >= tokenLimit - 100) {
            console.warn(`C·∫£nh b√°o: promptTokens (${promptTokens}) g·∫ßn v∆∞·ª£t gi·ªõi h·∫°n token (${tokenLimit}).`);
        }

        const response = await axios.post(
            'https://openrouter.ai/api/v1/chat/completions',
            {
                model: 'openai/gpt-4o',
                messages: session.messages,
                max_tokens: safeMaxTokens,
                temperature: 0.7,
                stream: true  // B·∫≠t ch·∫ø ƒë·ªô stream
            },
            {
                headers: {
                    'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    'HTTP-Referer': 'http://localhost:5000',
                    'Content-Type': 'application/json'
                },
                responseType: 'stream',  // Th√™m responseType stream
                timeout: 120000
            }
        );

        // Xo√° file t·∫°m
        files.forEach(f => fs.unlinkSync(f.path));

        // Thi·∫øt l·∫≠p response headers cho streaming
        res.setHeader('Content-Type', 'text/event-stream');
        res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Connection', 'keep-alive');

        let fullResponse = '';

        // X·ª≠ l√Ω stream response
        response.data.on('data', chunk => {
            const lines = chunk.toString().split('\n');
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    const data = line.slice(6);
                    if (data === '[DONE]') {
                        // K·∫øt th√∫c stream
                        res.write(`data: [DONE]\n\n`);
                        res.end();
                        
                        // L∆∞u to√†n b·ªô response v√†o session
                        session.messages.push({
                            role: 'assistant',
                            content: fullResponse
                        });
                        return;
                    }
                    
                    try {
                        const parsed = JSON.parse(data);
                        if (parsed.choices?.[0]?.delta?.content) {
                            const content = parsed.choices[0].delta.content;
                            fullResponse += content;
                            res.write(`data: ${JSON.stringify({ content })}\n\n`);
                        }
                    } catch (e) {
                        console.error('Error parsing stream data:', e);
                    }
                }
            }
        });

        response.data.on('error', err => {
            console.error('Stream error:', err);
            res.status(500).json({ reply: "L·ªói khi nh·∫≠n ph·∫£n h·ªìi t·ª´ OpenRouter" });
        });
    } catch (err) {
        console.error('L·ªói khi g·ªçi API OpenRouter:');
        if (err.response) {
            console.error('M√£ l·ªói:', err.response.status);
            console.error('D·ªØ li·ªáu l·ªói:', err.response.data);
            res.status(500).json({
                reply: `L·ªói t·ª´ OpenRouter: ${err.response.data?.error?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`
            });
        } else if (err.request) {
            console.error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi:', err.request);
            res.status(500).json({ reply: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ OpenRouter. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng." });
        } else {
            console.error('L·ªói:', err.message);
            res.status(500).json({ reply: `L·ªói khi g·ª≠i y√™u c·∫ßu: ${err.message}` });
        }
    }
});

// API l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
app.get('/conversation/:sessionId', (req, res) => {
    const sessionId = req.params.sessionId;
    const session = sessions[sessionId];

    if (!session) {
        return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y phi√™n h·ªôi tho·∫°i' });
    }

    // Ch·ªâ tr·∫£ v·ªÅ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√† AI (kh√¥ng tr·∫£ v·ªÅ system message)
    const conversationHistory = session.messages.slice(1);
    res.json({ history: conversationHistory });
});

// API x√≥a h·ªôi tho·∫°i
app.delete('/conversation/:sessionId', (req, res) => {
    const sessionId = req.params.sessionId;
    if (sessions[sessionId]) {
        delete sessions[sessionId];
        res.json({ success: true, message: 'ƒê√£ x√≥a phi√™n h·ªôi tho·∫°i' });
    } else {
        res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y phi√™n h·ªôi tho·∫°i' });
    }
});

app.listen(port, () => {
    console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
    if (!process.env.OPENROUTER_API_KEY) {
        console.error('C·∫¢NH B√ÅO: OPENROUTER_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p!');
    } else {
        console.log('OPENROUTER_API_KEY ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.');
    }
});